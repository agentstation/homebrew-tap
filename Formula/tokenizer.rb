# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Tokenizer < Formula
  desc "High-performance tokenizer implementations in Go with unified CLI"
  homepage "https://github.com/agentstation/tokenizer"
  version "0.0.3"
  license "MIT"

  depends_on "go" => :build

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/agentstation/tokenizer/releases/download/v0.0.3/tokenizer_0.0.3_darwin_x86_64.tar.gz"
      sha256 "e255ad4b680805006a1022adb04032889e28abc9e172dcbb57cf486322f81415"

      def install
        if build.bottle?
          bin.install "tokenizer"
        else
          # Build from source with version information
          ldflags = %W[
            -s -w
            -X main.version=#{version}
            -X main.commit=#{Utils.git_short_head}
            -X main.buildDate=#{Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")}
            -X main.goVersion=#{Formula["go"].version}
          ]
          system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/tokenizer"
        end

        # Install documentation
        doc.install "README.md", "LICENSE", "CLAUDE.md"
        doc.install "llama3/README.md" => "llama3-README.md"
        doc.install "llama3/IMPLEMENTATION.md" => "llama3-IMPLEMENTATION.md"

        # Install examples if they exist
        if Dir.exist?("examples")
          pkgshare.install "examples"
        end
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/agentstation/tokenizer/releases/download/v0.0.3/tokenizer_0.0.3_darwin_arm64.tar.gz"
      sha256 "ce96824a9088ccaf5882d517b92df342aca4fc91a8447a4a7cec2b8d40d637f1"

      def install
        if build.bottle?
          bin.install "tokenizer"
        else
          # Build from source with version information
          ldflags = %W[
            -s -w
            -X main.version=#{version}
            -X main.commit=#{Utils.git_short_head}
            -X main.buildDate=#{Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")}
            -X main.goVersion=#{Formula["go"].version}
          ]
          system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/tokenizer"
        end

        # Install documentation
        doc.install "README.md", "LICENSE", "CLAUDE.md"
        doc.install "llama3/README.md" => "llama3-README.md"
        doc.install "llama3/IMPLEMENTATION.md" => "llama3-IMPLEMENTATION.md"

        # Install examples if they exist
        if Dir.exist?("examples")
          pkgshare.install "examples"
        end
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/agentstation/tokenizer/releases/download/v0.0.3/tokenizer_0.0.3_linux_x86_64.tar.gz"
      sha256 "2da0055bf5fb92a5e8b525ac3446f808e40a87019e50fc7fbcb86006a45c206a"
      def install
        if build.bottle?
          bin.install "tokenizer"
        else
          # Build from source with version information
          ldflags = %W[
            -s -w
            -X main.version=#{version}
            -X main.commit=#{Utils.git_short_head}
            -X main.buildDate=#{Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")}
            -X main.goVersion=#{Formula["go"].version}
          ]
          system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/tokenizer"
        end

        # Install documentation
        doc.install "README.md", "LICENSE", "CLAUDE.md"
        doc.install "llama3/README.md" => "llama3-README.md"
        doc.install "llama3/IMPLEMENTATION.md" => "llama3-IMPLEMENTATION.md"

        # Install examples if they exist
        if Dir.exist?("examples")
          pkgshare.install "examples"
        end
      end
    end
    if Hardware::CPU.arm? and !Hardware::CPU.is_64_bit?
      url "https://github.com/agentstation/tokenizer/releases/download/v0.0.3/tokenizer_0.0.3_linux_armv6.tar.gz"
      sha256 "e1fc7e094e729e3da0e105f3024b36469383ee02f629b8c0bab68b031a4588e3"
      def install
        if build.bottle?
          bin.install "tokenizer"
        else
          # Build from source with version information
          ldflags = %W[
            -s -w
            -X main.version=#{version}
            -X main.commit=#{Utils.git_short_head}
            -X main.buildDate=#{Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")}
            -X main.goVersion=#{Formula["go"].version}
          ]
          system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/tokenizer"
        end

        # Install documentation
        doc.install "README.md", "LICENSE", "CLAUDE.md"
        doc.install "llama3/README.md" => "llama3-README.md"
        doc.install "llama3/IMPLEMENTATION.md" => "llama3-IMPLEMENTATION.md"

        # Install examples if they exist
        if Dir.exist?("examples")
          pkgshare.install "examples"
        end
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/agentstation/tokenizer/releases/download/v0.0.3/tokenizer_0.0.3_linux_arm64.tar.gz"
      sha256 "1caaf50365e434a31d89d541b28dbbaa02e6410719102f0259233c12e946803e"
      def install
        if build.bottle?
          bin.install "tokenizer"
        else
          # Build from source with version information
          ldflags = %W[
            -s -w
            -X main.version=#{version}
            -X main.commit=#{Utils.git_short_head}
            -X main.buildDate=#{Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")}
            -X main.goVersion=#{Formula["go"].version}
          ]
          system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/tokenizer"
        end

        # Install documentation
        doc.install "README.md", "LICENSE", "CLAUDE.md"
        doc.install "llama3/README.md" => "llama3-README.md"
        doc.install "llama3/IMPLEMENTATION.md" => "llama3-IMPLEMENTATION.md"

        # Install examples if they exist
        if Dir.exist?("examples")
          pkgshare.install "examples"
        end
      end
    end
  end

  def caveats
    <<~EOS
      Tokenizer has been installed! ðŸš€

      Quick start:
        tokenizer llama3 encode "Hello, world!"     # Encode text to tokens
        tokenizer llama3 decode 128000 9906 128001  # Decode tokens to text
        tokenizer llama3 info                       # Show tokenizer info
        tokenizer --help                            # Show all commands

      Documentation: https://github.com/agentstation/tokenizer
    EOS
  end

  test do
    # Test version command
    output = shell_output("#{bin}/tokenizer version")
    assert_match version.to_s, output
    assert_match "commit:", output
    assert_match "built:", output
    assert_match "go version:", output

    # Test help output
    assert_match "Usage:", shell_output("#{bin}/tokenizer --help")
    assert_match "Available Commands:", shell_output("#{bin}/tokenizer --help")

    # Test llama3 subcommand
    assert_match "llama3", shell_output("#{bin}/tokenizer --help")
    assert_match "encode", shell_output("#{bin}/tokenizer llama3 --help")

    # Test encoding
    output = shell_output("#{bin}/tokenizer llama3 encode 'Hello, world!'")
    assert_match "128000", output # begin_of_text token
    assert_match "9906", output   # "Hello" token
    assert_match "128001", output # end_of_text token

    # Test decoding
    output = shell_output("#{bin}/tokenizer llama3 decode 128000 9906 11 1917 0 128001")
    assert_match "Hello", output
    assert_match "world", output

    # Test info command
    output = shell_output("#{bin}/tokenizer llama3 info")
    assert_match "Vocabulary Size: 128256", output
    assert_match "Regular Tokens: 128000", output
    assert_match "Special Tokens: 256", output

    # Test piping
    output = pipe_output("#{bin}/tokenizer llama3 encode", "Test input")
    assert_match "128000", output # begin_of_text token
  end
end
